#!/usr/bin/env python
import argparse
from app import app,socketio,engine,Session
from flask_cors import CORS
from db import create_db,delete_db
from models import Base as AppModelBase
from socketIO import *
import json

parser = argparse.ArgumentParser()
parser.add_argument('-e','--env',default='dev',help="Pass the environment : dev, test, prod")
parser.add_argument('-d','--db',default=None,help="Pass a flag to set up a db for every time the server restarts.")
args = parser.parse_args()

if __name__ == '__main__':
    args = parser.parse_args()
    CORS(app)

    environment = args.env
    db = args.db

    if(environment in ['test','debug','dev']):
        delete_db(engine)

    session = Session()
    AppModelBase.metadata.create_all(engine)

    acs=[ArtifactCoordinatesModel(lat=40.09389490340147,lon=-85.62538134792705),ArtifactCoordinatesModel(lat=40.09585039419487,lon=-85.62004021718168),ArtifactCoordinatesModel(lat=40.09451269825916,lon=-85.62251577299321)]
    aims=[ArtifactImageModel('/static/whiteoak.jpg','The white oak tree'),ArtifactImageModel('/static/entrance.jpg','The visitor center'),ArtifactImageModel('/static/greatmound.jpg','The great mound!')]
    artifacts = [ArtifactModel(name="White Oak",description="The white oak tree"),ArtifactModel(name="Visitor Center",description="The visitor center."),ArtifactModel(name="Great Mound",description="The great mound.")]

    for loc in acs:
        session.add(loc)

    for a in aims:
        session.add(a)

    for idx,artifact in enumerate(artifacts):
        artifact.addCoordinates(acs[idx])
        artifact.addImage(aims[idx])
    session.commit()

    # # NOTE: backrefs work, so this is a valid way to get the artifacts!
    # artifact = session.query(ArtifactModel).get(1)
    # print(artifact)
    # print(artifact.images)
    # print(artifact.coordinates)
    # print(artifact.getDict())
    socketio.run(app,debug=True,port=5001,host='localhost')
